#include <Wire.h>
#include <Adafruit_SI5351.h>

Adafruit_SI5351 clockgen = Adafruit_SI5351();

const int ledPin = 2; // Onboard LED pin

String cw_message = "VVV de TA2BGH LOCATOR IS KM59gs PWR IS 10mW ANT IS HANDMADE VERTICAL"; // Your message
uint16_t duration = 100; // Decreased duration for faster Morse code

void setup(void) {
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  Serial.begin(115200);
  while (!Serial); // Wait for serial to be available
  Serial.println("Si5351 Clockgen Test");

  /* Initialise the sensor */
  if (clockgen.begin() != ERROR_NONE) {
    /* There was a problem detecting the IC ... check your connections */
    Serial.println("Ooops, no Si5351 detected ... Check your wiring or I2C ADDR!");
    while (1); // Stop the program here
  }

  Serial.println("OK!");

  // Configure PLLA to 900 MHz and set the initial frequency to 145.5 MHz
  clockgen.setupPLL(SI5351_PLL_A, 36, 0, 1); // Set PLLA to 900 MHz
  clockgen.setupMultisynth(0, SI5351_PLL_A, 6, 2, 15); // Set CLK0 to 145.5 MHz (900 MHz / 6.1875)
  clockgen.enableOutputs(true); // Enable the output
}

void loop(void) {
  cw_string_proc(cw_message);
  delay(500); // Duration of the break at the end before the long signal - in milliseconds

  cw(true);
  delay(5000); // Duration of the long signal at the end - in milliseconds

  cw(false);
  delay(1000); // Duration of the pause at the end after the long signal - in milliseconds
}

// Processing string to characters
void cw_string_proc(String str) {
  for (uint8_t j = 0; j < str.length(); j++)
    cw_char_proc(str[j]);
}

// Processing characters to Morse symbols
void cw_char_proc(char m) {
  String s;

  if (m == ' ') { // Pause between words
    word_space();
    return;
  }

  if (m > 96) // ASCII, case change a-z to A-Z
    if (m < 123)
      m -= 32;

  switch (m) { // Morse
    case 'A': s = ".-#"; break;
    case 'B': s = "-...#"; break;
    case 'C': s = "-.-.#"; break;
    case 'D': s = "-..#"; break;
    case 'E': s = ".#"; break;
    case 'F': s = "..-.#"; break;
    case 'G': s = "--.#"; break;
    case 'H': s = "....#"; break;
    case 'I': s = "..#"; break;
    case 'J': s = ".---#"; break;
    case 'K': s = "-.-#"; break;
    case 'L': s = ".-..#"; break;
    case 'M': s = "--#"; break;
    case 'N': s = "-.#"; break;
    case 'O': s = "---#"; break;
    case 'P': s = ".--.#"; break;
    case 'Q': s = "--.-#"; break;
    case 'R': s = ".-.#"; break;
    case 'S': s = "...#"; break;
    case 'T': s = "-#"; break;
    case 'U': s = "..-#"; break;
    case 'V': s = "...-#"; break;
    case 'W': s = ".--#"; break;
    case 'X': s = "-..-#"; break;
    case 'Y': s = "-.--#"; break;
    case 'Z': s = "--..#"; break;

    case '1': s = ".----#"; break;
    case '2': s = "..---#"; break;
    case '3': s = "...--#"; break;
    case '4': s = "....-#"; break;
    case '5': s = ".....#"; break;
    case '6': s = "-....#"; break;
    case '7': s = "--...#"; break;
    case '8': s = "---..#"; break;
    case '9': s = "----.#"; break;
    case '0': s = "-----#"; break;

    case '?': s = "..--..#"; break;
    case '=': s = "-...-#"; break;
    case ',': s = "--..--#"; break;
    case '/': s = "-..-.#"; break;
  }

  for (uint8_t i = 0; i < 7; i++) {
    switch (s[i]) {
      case '.': di(); break; // di
      case '-': dah(); break; // dah
      case '#': char_space(); return; // end of morse symbol
    }
  }
}

void di() {
  cw(true); // TX di
  delay(duration);

  cw(false); // stop TX di
  delay(duration);
}

void dah() {
  cw(true); // TX dah
  delay(3 * duration);

  cw(false); // stop TX dah
  delay(duration);
}

void char_space() { // 3x, pause between letters
  delay(2 * duration); // 1x from end of character + 2x from the beginning of new character
}

void word_space() { // 7x, pause between words
  delay(6 * duration); // 1x from end of the word + 6x from the beginning of new word
}

void cw(bool state) { // TX-CW, TX-LED
  if (state) {
    clockgen.enableOutputs(true);
    digitalWrite(ledPin, HIGH);
  } else {
    clockgen.enableOutputs(false);
    digitalWrite(ledPin, LOW);
  }
}
